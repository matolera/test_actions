name: check-solution-existence

description: check-solution-existence

inputs:
  solution_name:
    description: solution_name
    required: true
  environment_url:
    description: environment_url
    required: true
  tenant_id:
    description: tenant_id
    required: true
  client_id:
    description: client_id
    required: true
  client_secret:
    description: client_secret
    required: true
  secrets:
    description: "environment secrets"
    required: true

outputs:
  check_solution_exists:
    description: "solution existence flag"
    value: ${{ steps.get-solutions-from-env.outputs.exists }}

runs:
  using: "composite"
  steps:
    - uses: Firenza/secrets-to-env@v1.1.0
      with:
        secrets: ${{ inputs.secrets }}
    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'
    - name: get-solutions-from-env
      id: get-solutions-from-env
      run: |
        nuget install Microsoft.PowerApps.CLI -OutputDirectory pac
        $nugetFolder = Get-ChildItem "pac" | Where-Object {$_.Name -match "Microsoft.PowerApps.CLI."}
        $pacFolder = $nugetFolder.FullName + "\tools"

        # Created a connection with the environment
        echo "$pacFolder\pac.exe auth create --url ${{ inputs.environment_url }} --tenant ${{ inputs.tenant_id }} --applicationId ${{ inputs.client_id }} --clientSecret ${{ inputs.client_secret }}"

        # List all the solutions on the environment
        $result = & "$pacFolder\pac.exe solution list"
        $lines = $result -split "`n"
        $check_solution_exists = $false

        # Check if the solution unique name exists
        # For ($i=5; $i -lt $lines.Length - 1; $i++) {
        #  $check_solution_exists = $lines[i] -like ${{ inputs.solution_name }}
        # }

        # Return the flag
        echo "::set-output name=check_solution_exists::$check_solution_exists"
      shell: powershell
